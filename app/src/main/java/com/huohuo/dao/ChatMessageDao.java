package com.huohuo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yjb.dao.table.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, String> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FromUserId = new Property(1, Integer.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property FromUserName = new Property(2, String.class, "fromUserName", false, "FROM_USER_NAME");
        public final static Property FromUserNickName = new Property(3, String.class, "fromUserNickName", false, "FROM_USER_NICK_NAME");
        public final static Property FromUserHeadImage = new Property(4, String.class, "fromUserHeadImage", false, "FROM_USER_HEAD_IMAGE");
        public final static Property ToUserId = new Property(5, Integer.class, "toUserId", false, "TO_USER_ID");
        public final static Property ToUserName = new Property(6, String.class, "toUserName", false, "TO_USER_NAME");
        public final static Property ToUserHeadImage = new Property(7, String.class, "toUserHeadImage", false, "TO_USER_HEAD_IMAGE");
        public final static Property ChatMessage = new Property(8, String.class, "chatMessage", false, "CHAT_MESSAGE");
        public final static Property MessageType = new Property(9, Integer.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property ViewMessageType = new Property(10, Integer.class, "viewMessageType", false, "VIEW_MESSAGE_TYPE");
        public final static Property SendTime = new Property(11, Long.class, "sendTime", false, "SEND_TIME");
        public final static Property Readed = new Property(12, Boolean.class, "readed", false, "READED");
        public final static Property UseNoDisturb = new Property(13, Boolean.class, "useNoDisturb", false, "USE_NO_DISTURB");
        public final static Property HandType = new Property(14, int.class, "handType", false, "HAND_TYPE");
        public final static Property Receiverd = new Property(15, boolean.class, "receiverd", false, "RECEIVERD");
        public final static Property ShowTime = new Property(16, boolean.class, "showTime", false, "SHOW_TIME");
        public final static Property MsgState = new Property(17, int.class, "msgState", false, "MSG_STATE");
        public final static Property GroupHeadImage = new Property(18, String.class, "groupHeadImage", false, "GROUP_HEAD_IMAGE");
        public final static Property GroupName = new Property(19, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupId = new Property(20, Long.class, "groupId", false, "GROUP_ID");
        public final static Property NotifyUser = new Property(21, String.class, "notifyUser", false, "NOTIFY_USER");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FROM_USER_ID\" INTEGER NOT NULL ," + // 1: fromUserId
                "\"FROM_USER_NAME\" TEXT NOT NULL ," + // 2: fromUserName
                "\"FROM_USER_NICK_NAME\" TEXT," + // 3: fromUserNickName
                "\"FROM_USER_HEAD_IMAGE\" TEXT," + // 4: fromUserHeadImage
                "\"TO_USER_ID\" INTEGER," + // 5: toUserId
                "\"TO_USER_NAME\" TEXT," + // 6: toUserName
                "\"TO_USER_HEAD_IMAGE\" TEXT," + // 7: toUserHeadImage
                "\"CHAT_MESSAGE\" TEXT NOT NULL ," + // 8: chatMessage
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 9: messageType
                "\"VIEW_MESSAGE_TYPE\" INTEGER NOT NULL ," + // 10: viewMessageType
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 11: sendTime
                "\"READED\" INTEGER NOT NULL ," + // 12: readed
                "\"USE_NO_DISTURB\" INTEGER," + // 13: useNoDisturb
                "\"HAND_TYPE\" INTEGER NOT NULL ," + // 14: handType
                "\"RECEIVERD\" INTEGER NOT NULL ," + // 15: receiverd
                "\"SHOW_TIME\" INTEGER NOT NULL ," + // 16: showTime
                "\"MSG_STATE\" INTEGER NOT NULL ," + // 17: msgState
                "\"GROUP_HEAD_IMAGE\" TEXT," + // 18: groupHeadImage
                "\"GROUP_NAME\" TEXT," + // 19: groupName
                "\"GROUP_ID\" INTEGER," + // 20: groupId
                "\"NOTIFY_USER\" TEXT);"); // 21: notifyUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getFromUserId());
        stmt.bindString(3, entity.getFromUserName());
 
        String fromUserNickName = entity.getFromUserNickName();
        if (fromUserNickName != null) {
            stmt.bindString(4, fromUserNickName);
        }
 
        String fromUserHeadImage = entity.getFromUserHeadImage();
        if (fromUserHeadImage != null) {
            stmt.bindString(5, fromUserHeadImage);
        }
 
        Integer toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindLong(6, toUserId);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(7, toUserName);
        }
 
        String toUserHeadImage = entity.getToUserHeadImage();
        if (toUserHeadImage != null) {
            stmt.bindString(8, toUserHeadImage);
        }
        stmt.bindString(9, entity.getChatMessage());
        stmt.bindLong(10, entity.getMessageType());
        stmt.bindLong(11, entity.getViewMessageType());
        stmt.bindLong(12, entity.getSendTime());
        stmt.bindLong(13, entity.getReaded() ? 1L: 0L);
 
        Boolean useNoDisturb = entity.getUseNoDisturb();
        if (useNoDisturb != null) {
            stmt.bindLong(14, useNoDisturb ? 1L: 0L);
        }
        stmt.bindLong(15, entity.getHandType());
        stmt.bindLong(16, entity.getReceiverd() ? 1L: 0L);
        stmt.bindLong(17, entity.getShowTime() ? 1L: 0L);
        stmt.bindLong(18, entity.getMsgState());
 
        String groupHeadImage = entity.getGroupHeadImage();
        if (groupHeadImage != null) {
            stmt.bindString(19, groupHeadImage);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(20, groupName);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(21, groupId);
        }
 
        String notifyUser = entity.getNotifyUser();
        if (notifyUser != null) {
            stmt.bindString(22, notifyUser);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getFromUserId());
        stmt.bindString(3, entity.getFromUserName());
 
        String fromUserNickName = entity.getFromUserNickName();
        if (fromUserNickName != null) {
            stmt.bindString(4, fromUserNickName);
        }
 
        String fromUserHeadImage = entity.getFromUserHeadImage();
        if (fromUserHeadImage != null) {
            stmt.bindString(5, fromUserHeadImage);
        }
 
        Integer toUserId = entity.getToUserId();
        if (toUserId != null) {
            stmt.bindLong(6, toUserId);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(7, toUserName);
        }
 
        String toUserHeadImage = entity.getToUserHeadImage();
        if (toUserHeadImage != null) {
            stmt.bindString(8, toUserHeadImage);
        }
        stmt.bindString(9, entity.getChatMessage());
        stmt.bindLong(10, entity.getMessageType());
        stmt.bindLong(11, entity.getViewMessageType());
        stmt.bindLong(12, entity.getSendTime());
        stmt.bindLong(13, entity.getReaded() ? 1L: 0L);
 
        Boolean useNoDisturb = entity.getUseNoDisturb();
        if (useNoDisturb != null) {
            stmt.bindLong(14, useNoDisturb ? 1L: 0L);
        }
        stmt.bindLong(15, entity.getHandType());
        stmt.bindLong(16, entity.getReceiverd() ? 1L: 0L);
        stmt.bindLong(17, entity.getShowTime() ? 1L: 0L);
        stmt.bindLong(18, entity.getMsgState());
 
        String groupHeadImage = entity.getGroupHeadImage();
        if (groupHeadImage != null) {
            stmt.bindString(19, groupHeadImage);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(20, groupName);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(21, groupId);
        }
 
        String notifyUser = entity.getNotifyUser();
        if (notifyUser != null) {
            stmt.bindString(22, notifyUser);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // fromUserId
            cursor.getString(offset + 2), // fromUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromUserNickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromUserHeadImage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // toUserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // toUserName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // toUserHeadImage
            cursor.getString(offset + 8), // chatMessage
            cursor.getInt(offset + 9), // messageType
            cursor.getInt(offset + 10), // viewMessageType
            cursor.getLong(offset + 11), // sendTime
            cursor.getShort(offset + 12) != 0, // readed
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // useNoDisturb
            cursor.getInt(offset + 14), // handType
            cursor.getShort(offset + 15) != 0, // receiverd
            cursor.getShort(offset + 16) != 0, // showTime
            cursor.getInt(offset + 17), // msgState
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // groupHeadImage
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // groupName
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // groupId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // notifyUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFromUserId(cursor.getInt(offset + 1));
        entity.setFromUserName(cursor.getString(offset + 2));
        entity.setFromUserNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromUserHeadImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToUserId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setToUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToUserHeadImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChatMessage(cursor.getString(offset + 8));
        entity.setMessageType(cursor.getInt(offset + 9));
        entity.setViewMessageType(cursor.getInt(offset + 10));
        entity.setSendTime(cursor.getLong(offset + 11));
        entity.setReaded(cursor.getShort(offset + 12) != 0);
        entity.setUseNoDisturb(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setHandType(cursor.getInt(offset + 14));
        entity.setReceiverd(cursor.getShort(offset + 15) != 0);
        entity.setShowTime(cursor.getShort(offset + 16) != 0);
        entity.setMsgState(cursor.getInt(offset + 17));
        entity.setGroupHeadImage(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setGroupName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGroupId(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setNotifyUser(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatMessage entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
