package com.huohuo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huohuo.dao.table.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FriendUid = new Property(0, Long.class, "friendUid", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property FirstChar = new Property(4, String.class, "firstChar", false, "FIRST_CHAR");
        public final static Property FriendRemark = new Property(5, String.class, "friendRemark", false, "FRIEND_REMARK");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "NICK_NAME");
        public final static Property HeadImage = new Property(7, String.class, "headImage", false, "HEAD_IMAGE");
        public final static Property BecomeFriend = new Property(8, boolean.class, "becomeFriend", false, "BECOME_FRIEND");
        public final static Property UseAddFriendForMe = new Property(9, boolean.class, "useAddFriendForMe", false, "USE_ADD_FRIEND_FOR_ME");
        public final static Property Register = new Property(10, boolean.class, "register", false, "REGISTER");
        public final static Property UseNoDisturb = new Property(11, Boolean.class, "useNoDisturb", false, "USE_NO_DISTURB");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: friendUid
                "\"ID\" INTEGER," + // 1: id
                "\"MOBILE\" TEXT NOT NULL ," + // 2: mobile
                "\"REAL_NAME\" TEXT," + // 3: realName
                "\"FIRST_CHAR\" TEXT NOT NULL ," + // 4: firstChar
                "\"FRIEND_REMARK\" TEXT," + // 5: friendRemark
                "\"NICK_NAME\" TEXT NOT NULL ," + // 6: nickName
                "\"HEAD_IMAGE\" TEXT NOT NULL ," + // 7: headImage
                "\"BECOME_FRIEND\" INTEGER NOT NULL ," + // 8: becomeFriend
                "\"USE_ADD_FRIEND_FOR_ME\" INTEGER NOT NULL ," + // 9: useAddFriendForMe
                "\"REGISTER\" INTEGER NOT NULL ," + // 10: register
                "\"USE_NO_DISTURB\" INTEGER NOT NULL );"); // 11: useNoDisturb
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long friendUid = entity.getFriendUid();
        if (friendUid != null) {
            stmt.bindLong(1, friendUid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getMobile());
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
        stmt.bindString(5, entity.getFirstChar());
 
        String friendRemark = entity.getFriendRemark();
        if (friendRemark != null) {
            stmt.bindString(6, friendRemark);
        }
        stmt.bindString(7, entity.getNickName());
        stmt.bindString(8, entity.getHeadImage());
        stmt.bindLong(9, entity.getBecomeFriend() ? 1L: 0L);
        stmt.bindLong(10, entity.getUseAddFriendForMe() ? 1L: 0L);
        stmt.bindLong(11, entity.getRegister() ? 1L: 0L);
        stmt.bindLong(12, entity.getUseNoDisturb() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long friendUid = entity.getFriendUid();
        if (friendUid != null) {
            stmt.bindLong(1, friendUid);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindString(3, entity.getMobile());
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
        stmt.bindString(5, entity.getFirstChar());
 
        String friendRemark = entity.getFriendRemark();
        if (friendRemark != null) {
            stmt.bindString(6, friendRemark);
        }
        stmt.bindString(7, entity.getNickName());
        stmt.bindString(8, entity.getHeadImage());
        stmt.bindLong(9, entity.getBecomeFriend() ? 1L: 0L);
        stmt.bindLong(10, entity.getUseAddFriendForMe() ? 1L: 0L);
        stmt.bindLong(11, entity.getRegister() ? 1L: 0L);
        stmt.bindLong(12, entity.getUseNoDisturb() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // friendUid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
            cursor.getString(offset + 4), // firstChar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // friendRemark
            cursor.getString(offset + 6), // nickName
            cursor.getString(offset + 7), // headImage
            cursor.getShort(offset + 8) != 0, // becomeFriend
            cursor.getShort(offset + 9) != 0, // useAddFriendForMe
            cursor.getShort(offset + 10) != 0, // register
            cursor.getShort(offset + 11) != 0 // useNoDisturb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setFriendUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMobile(cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstChar(cursor.getString(offset + 4));
        entity.setFriendRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickName(cursor.getString(offset + 6));
        entity.setHeadImage(cursor.getString(offset + 7));
        entity.setBecomeFriend(cursor.getShort(offset + 8) != 0);
        entity.setUseAddFriendForMe(cursor.getShort(offset + 9) != 0);
        entity.setRegister(cursor.getShort(offset + 10) != 0);
        entity.setUseNoDisturb(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setFriendUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.getFriendUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        return entity.getFriendUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
