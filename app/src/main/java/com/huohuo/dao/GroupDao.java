package com.huohuo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huohuo.dao.table.Group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP".
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "GROUP";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupAutoHead = new Property(3, String.class, "groupAutoHead", false, "GROUP_AUTO_HEAD");
        public final static Property GroupAssignHead = new Property(4, String.class, "groupAssignHead", false, "GROUP_ASSIGN_HEAD");
        public final static Property AllowNoDisturb = new Property(5, boolean.class, "allowNoDisturb", false, "ALLOW_NO_DISTURB");
        public final static Property AllowUserSpeak = new Property(6, boolean.class, "allowUserSpeak", false, "ALLOW_USER_SPEAK");
        public final static Property AllowEachAddFriend = new Property(7, boolean.class, "allowEachAddFriend", false, "ALLOW_EACH_ADD_FRIEND");
        public final static Property AllowSpeak = new Property(8, boolean.class, "allowSpeak", false, "ALLOW_SPEAK");
        public final static Property Jiesan = new Property(9, boolean.class, "jiesan", false, "JIESAN");
    }


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"GROUP_NAME\" TEXT NOT NULL ," + // 2: groupName
                "\"GROUP_AUTO_HEAD\" TEXT," + // 3: groupAutoHead
                "\"GROUP_ASSIGN_HEAD\" TEXT," + // 4: groupAssignHead
                "\"ALLOW_NO_DISTURB\" INTEGER NOT NULL ," + // 5: allowNoDisturb
                "\"ALLOW_USER_SPEAK\" INTEGER NOT NULL ," + // 6: allowUserSpeak
                "\"ALLOW_EACH_ADD_FRIEND\" INTEGER NOT NULL ," + // 7: allowEachAddFriend
                "\"ALLOW_SPEAK\" INTEGER NOT NULL ," + // 8: allowSpeak
                "\"JIESAN\" INTEGER NOT NULL );"); // 9: jiesan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindString(3, entity.getGroupName());
 
        String groupAutoHead = entity.getGroupAutoHead();
        if (groupAutoHead != null) {
            stmt.bindString(4, groupAutoHead);
        }
 
        String groupAssignHead = entity.getGroupAssignHead();
        if (groupAssignHead != null) {
            stmt.bindString(5, groupAssignHead);
        }
        stmt.bindLong(6, entity.getAllowNoDisturb() ? 1L: 0L);
        stmt.bindLong(7, entity.getAllowUserSpeak() ? 1L: 0L);
        stmt.bindLong(8, entity.getAllowEachAddFriend() ? 1L: 0L);
        stmt.bindLong(9, entity.getAllowSpeak() ? 1L: 0L);
        stmt.bindLong(10, entity.getJiesan() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindString(3, entity.getGroupName());
 
        String groupAutoHead = entity.getGroupAutoHead();
        if (groupAutoHead != null) {
            stmt.bindString(4, groupAutoHead);
        }
 
        String groupAssignHead = entity.getGroupAssignHead();
        if (groupAssignHead != null) {
            stmt.bindString(5, groupAssignHead);
        }
        stmt.bindLong(6, entity.getAllowNoDisturb() ? 1L: 0L);
        stmt.bindLong(7, entity.getAllowUserSpeak() ? 1L: 0L);
        stmt.bindLong(8, entity.getAllowEachAddFriend() ? 1L: 0L);
        stmt.bindLong(9, entity.getAllowSpeak() ? 1L: 0L);
        stmt.bindLong(10, entity.getJiesan() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.getString(offset + 2), // groupName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupAutoHead
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupAssignHead
            cursor.getShort(offset + 5) != 0, // allowNoDisturb
            cursor.getShort(offset + 6) != 0, // allowUserSpeak
            cursor.getShort(offset + 7) != 0, // allowEachAddFriend
            cursor.getShort(offset + 8) != 0, // allowSpeak
            cursor.getShort(offset + 9) != 0 // jiesan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGroupName(cursor.getString(offset + 2));
        entity.setGroupAutoHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupAssignHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAllowNoDisturb(cursor.getShort(offset + 5) != 0);
        entity.setAllowUserSpeak(cursor.getShort(offset + 6) != 0);
        entity.setAllowEachAddFriend(cursor.getShort(offset + 7) != 0);
        entity.setAllowSpeak(cursor.getShort(offset + 8) != 0);
        entity.setJiesan(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Group entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
