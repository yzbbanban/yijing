package com.yjb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yjb.dao.table.FriendApply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_APPLY".
*/
public class FriendApplyDao extends AbstractDao<FriendApply, Long> {

    public static final String TABLENAME = "FRIEND_APPLY";

    /**
     * Properties of entity FriendApply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property ShowCount = new Property(4, boolean.class, "showCount", false, "SHOW_COUNT");
        public final static Property MessageType = new Property(5, Integer.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property Message = new Property(6, String.class, "message", false, "MESSAGE");
        public final static Property HandledType = new Property(7, Integer.class, "handledType", false, "HANDLED_TYPE");
    }


    public FriendApplyDao(DaoConfig config) {
        super(config);
    }
    
    public FriendApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_APPLY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"SHOW_COUNT\" INTEGER NOT NULL ," + // 4: showCount
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 5: messageType
                "\"MESSAGE\" TEXT," + // 6: message
                "\"HANDLED_TYPE\" INTEGER);"); // 7: handledType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_APPLY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendApply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getShowCount() ? 1L: 0L);
        stmt.bindLong(6, entity.getMessageType());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(7, message);
        }
 
        Integer handledType = entity.getHandledType();
        if (handledType != null) {
            stmt.bindLong(8, handledType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendApply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getShowCount() ? 1L: 0L);
        stmt.bindLong(6, entity.getMessageType());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(7, message);
        }
 
        Integer handledType = entity.getHandledType();
        if (handledType != null) {
            stmt.bindLong(8, handledType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendApply readEntity(Cursor cursor, int offset) {
        FriendApply entity = new FriendApply( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.getLong(offset + 3), // time
            cursor.getShort(offset + 4) != 0, // showCount
            cursor.getInt(offset + 5), // messageType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // message
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // handledType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendApply entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setShowCount(cursor.getShort(offset + 4) != 0);
        entity.setMessageType(cursor.getInt(offset + 5));
        entity.setMessage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHandledType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendApply entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendApply entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendApply entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
